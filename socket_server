#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h> //system program
void error_handling(char *message);
int main(int argc, char *argv[]){//
    int serv_sock;
    int clnt_sock;
    
    struct sockaddr_in serv_addr; //store server address// physical address
    struct sockaddr_in clnt_addr; //store client address
    socklen_t  clnt_addr_size;//lengh of socket

    char message[]="Hello World!";
/*
young@young-VirtualBox:~/work/basic2$ ./server 89234
young@young-VirtualBox:~/work/basic2$ gcc -o server server.c
young@young-VirtualBox:~/work/basic2$ ./server 23 234
young@young-VirtualBox:~/work/basic2$ ./server 23
Usage: ./server <port>
young@young-VirtualBox:~/work/basic2$ gcc -o server server.c
young@young-VirtualBox:~/work/basic2$ ./server
Usage: ./server <port>

*/
    if(argc!=2){//if argc is not 2
        printf("Usage: %s <port>\n",argv[0]); //
    }

    serv_sock=socket(PF_INET, SOCK_STREAM,0);//IPv4, TCP, protocol= Default 0
    if(serv_sock ==-1){
        error_handling("socket() error");
    }
//memoryset to 0, for managing memory
    memset(&serv_addr,0, sizeof(serv_addr)); //set to 0& put address. if not, address will be trash
    serv_addr.sin_family=AF_INET;//solid promise
    serv_addr.sin_addr.s_addr=htonl(INADDR_ANY);//IP address setting for server//host to long function, should change to network type
    serv_addr.sin_port=htons(atoi(argv[1]));//string from 9001 when if comes to compile//atoi=string to integer

    //bind,,
    //                   address of socket, 
    if(bind(serv_sock, (struct sockaddr*)&serv_addr, sizeof(serv_addr))==-1){
        error_handling("bind() error");
    }
    //listen
    if(listen(serv_sock, 5) ==-1){
        error_handling("listen() error");
    }
    clnt_addr_size = sizeof(clnt_addr);
    //accept --------------------------------pause -----------------------blockIO
    clnt_sock=accept(serv_sock, (struct sockaddr*)&clnt_addr, &clnt_addr_size);
    if(clnt_sock==-1){
        error_handling("Accept() error");
    }
    //R&W
    write(clnt_sock, message, sizeof(message));
    //return to resource
    close(clnt_sock);
    close(serv_sock);

    return 0;
}
void error_handling(char *message){
    fputs(message,stderr);// compare with scanf// we have to write the role of fputs like stderr, not likely scanf
    fputc('\n', stderr);
    exit(1);
}
